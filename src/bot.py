from telethon import TelegramClient, events, functions, types
import sqlite3
import random
import asyncio
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.functions.messages import GetChatsRequest
from telethon.tl.types import Chat

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –æ–±–ª—ñ–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ —ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def get_account_data():
    try:
        with sqlite3.connect('accounts_db.db') as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT api_id, api_hash, phone FROM accounts')
            return cursor.fetchall()
    except sqlite3.OperationalError as e:
        print(f"Database error: {e}")
        return []
    

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫–∞–Ω–∞–ª–∏ —ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def get_channel_data():
    try:
        with sqlite3.connect('accounts_db.db') as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT channel_link, channel_id FROM channel_links')
            return cursor.fetchall()
    except sqlite3.OperationalError as e:
        print(f"Database error: {e}")
        return []

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
clients = {}

CHANNEL_LINKS = []
TARGET_CHAT_ID = []

def is_value_in_list(value):
    return str(value) in TARGET_CHAT_ID



# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
async def initialize_clients():
    accounts = get_account_data()
    for api_id, api_hash, phone in accounts:
        client = TelegramClient(f'session_{phone}', api_id, api_hash)
        await client.start(phone)
        clients[phone] = client
        print(f"Initialized client for {phone}")
        await subscribe_to_channels(client)
        print(f"Client with phone: {phone} subscribed to all channels")

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
        client.add_event_handler(new_message_handler, events.NewMessage)
        client.add_event_handler(poll_message_handler, events.NewMessage)

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
def initialize_channels():
    channels = get_channel_data()
    for channel_link, channel_id  in channels:
        CHANNEL_LINKS.append(channel_link)
        TARGET_CHAT_ID.append(channel_id)
        print(f"Initialized chat for {channel_id}")

# –ü—ñ–¥–ø–∏—Å–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏ –∑ CHANNEL_LINKS
async def subscribe_to_channels(client):
    for  channel_link in CHANNEL_LINKS:
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ '+')
            if '+' in channel_link:
                invite_hash = channel_link.split('+')[-1]  # –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å—Ç–∏–Ω—É –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –ø—ñ—Å–ª—è '+'
                
                # –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫–∞–Ω–∞–ª—É
                await client(ImportChatInviteRequest(invite_hash))
                print(f"Client {client.session.filename} joined channel using invite link {channel_link}")
            else:
                print(f"Invalid invite link format: {channel_link}")
        except Exception as e:
            print(f"Error joining channel {channel_link}: {e}")



# –í–∫–∞–∑–∞—Ç–∏ ID –∞–±–æ –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏, —É —è–∫—ñ–π —Å–ª—ñ–¥ —Ä–µ–∞–≥—É–≤–∞—Ç–∏


# –†–∞–Ω–¥–æ–º–Ω–∏–π –≤–∏–±—ñ—Ä —Ä–µ–∞–∫—Ü—ñ—ó –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
REACTIONS = ['üëç', 'üî•', '‚ù§Ô∏è', 'üòé', 'üòç', '‚ö°Ô∏è']

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –¥–ª—è –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–¥–æ–¥–∞—î —Ä–µ–∞–∫—Ü—ñ—ó)
async def new_message_handler(event):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–æ–¥—ñ—è —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —ñ —á–∏ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤ —Ü—ñ–ª—å–æ–≤—ñ–π –≥—Ä—É–ø—ñ
    if isinstance(event, events.NewMessage.Event) and is_value_in_list(event.chat_id):
        client = event._client  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ _client –∑–∞–º—ñ—Å—Ç—å client
        chat_id = event.chat_id
        message_id = event.message.id
        reaction = random.choice(REACTIONS)

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∞–∫—Ü—ñ—ó —Ç–∏–ø—É ReactionEmoji
        reaction_emoji = types.ReactionEmoji(emoticon=reaction)

        await client(functions.messages.SendReactionRequest(
            peer=chat_id,
            msg_id=message_id,
            reaction=[reaction_emoji]  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞ ReactionEmoji
        ))
        print(f"Reaction {reaction} added to message {message_id} in chat {chat_id}")

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –¥–ª—è –Ω–æ–≤–∏—Ö –æ–ø–∏—Ç—É–≤–∞–Ω—å (–≤–∏–ø–∞–¥–∫–æ–≤–µ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è)
async def poll_message_handler(event):

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–æ–¥—ñ—è —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∑ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è–º —ñ —á–∏ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤ —Ü—ñ–ª—å–æ–≤—ñ–π –≥—Ä—É–ø—ñ
    if isinstance(event, events.NewMessage.Event) and event.message.poll and is_value_in_list(event.chat_id):
        client = event._client  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ _client –∑–∞–º—ñ—Å—Ç—å client
        chat_id = event.chat_id
        poll_id = event.message.id

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø—Ü—ñ–π –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
        try:
            poll = event.message.media.poll  # –û—Ç—Ä–∏–º—É—î–º–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            options = poll.answers  # –¶–µ –æ–ø—Ü—ñ—ó –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è

            if options:
                random_choice = random.choice(options)  # –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç—É
                await client(functions.messages.SendVoteRequest(
                    peer=chat_id,
                    msg_id=poll_id,
                    options=[random_choice.option]  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–π—Ç–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—É
                ))
                print(f"Voted randomly in poll {poll_id} in chat {chat_id}")

        except Exception as e:
            print(f"Failed to vote in poll {poll_id} in chat {chat_id}: {e}")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤ —ñ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
async def main():
    initialize_channels()
    await initialize_clients()
    # –ù–µ –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø—Ä–æ–≥—Ä–∞–º—É, –ø–æ–∫–∏ –ø—Ä–∞—Ü—é—é—Ç—å –æ–±—Ä–æ–±–Ω–∏–∫–∏
    await asyncio.Event().wait()

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    asyncio.run(main())


